Open/Closed Principle is one of the five principles described by Robert C Martin. It is considered as the most important principle of object-oriented design. Bertrand Meyer wrote about it in 1988. He explained as:
"Classes should be open for extension but closed for modification."

Example of open/closed principle:

public class rectangle {
public double length;
public double width;
}
public class AreaCalculator
{
public double calculateRectangleArea(Rectangle rectangle)
{
return rectangle.length* rectangle.width;
}
}

public class Circle
{
public double radius;
}
public class AreaCalculator
{
public double calculateCircleArea( Circle circle)
{
return (22/7) * circle.radius*circle.radius;
}
}

Violation of OCP!!
â€¢	Adding more shapes (Square,Circle etc )requires you to modify AreaCalculator class code.


Solution abstraction


public interface Shape

{

public double calculateArea();

}

public class Rectangle implements Shape

{
double length;
double width;
public double calculateArea()
{
return length*width;
}
}
open for extension
public class Circle implements Shape
{
public double radius;
public double calculateArea()
{
return (22/7) *radius*radius;
}

}
 closed for modification
public class AreaCalculator{
public double caluclateShapeArea(Shape shape)
{
return shape.calculatorArea();
}
}